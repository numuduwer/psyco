<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
  <mapper namespace="member">
  	<select id="existUserCheck" parameterType="String" resultType="_int">
  		select count(*) from member where email=#{value}
  	</select>
  	
  	<select id="getMemberProfile" parameterType="String" resultType="memberDTO">
  		select * from member where email=#{value}
  	</select>
 
 
  	<select id="getMemberProfileFromId" parameterType="string" resultType="memberDTO">
  		select * from member where member_Id=#{member_Id}
  	</select>
  	
  	<select id="getMemberProfileFromNum" parameterType="int" resultType="memberDTO">
  		select * from member where member_Num=#{member_Num}
  	</select>
  	
  	<insert id="insertMember" parameterType="memberDTO">
  		<if test="pw == null">
  			insert into member(member_num, member_Id, name, birth, phonenum, gender, nickname, email, purchase_count, business_license, license_number) values(member_seq.nextval, #{member_Id}, #{name}, #{birth}, #{phoneNum}, #{gender}, #{nickname}, #{email}, #{purchase_count}, #{business_license}, #{license_number})
  		</if>
  		<if test="pw != null">
  			insert into member(member_num, member_Id, pw, name, birth, phonenum, gender, nickname, email, purchase_count, business_license, license_number) values(member_seq.nextval, #{member_Id}, #{pw}, #{name}, #{birth}, #{phoneNum}, #{gender}, #{nickname}, #{email}, #{purchase_count}, #{business_license}, #{license_number})
  		</if>
  	</insert>
  	
  	<select id="loginCheck" parameterType="hashmap" resultType="_int">
  		select count(*) from member where member_Id=#{member_Id} and pw=#{pw}
  	</select>
  	
  	<!--멤버 정보 가져오기 -동윤-  -->
  	<select id="memberInfo" parameterType="String" resultType="MemberDTO">
  		select * from member where member_id=#{value}
  	</select>
  	<!-- 멤버 닉네임 가져오기 동윤 -->
  	<select id="getNickName" parameterType="String" resultType="String">
  		select nickname from member where member_in=#{value}
  	</select>
  	
  	<delete id="userDelete" parameterType="hashmap">
  		delete from member where member_Id=#{member_Id} and pw=#{pw}
  	</delete>
  	
  	<update id="modifySocialUserPro" parameterType="hashmap">
  		update member set phoneNum=#{phoneNum}, birth=#{birth} where member_Num=#{member_Num} and member_Id=#{member_Id}
  	</update>
  	
  	<update id="modifyNormalUserPro" parameterType="memberDTO">
  		update member set pw=#{pw}, name=#{name}, birth=#{birth}, phoneNum=#{phoneNum}, gender=#{gender}, nickname=#{nickname}, email=#{email} where member_Num=#{member_Num} and member_Id=#{member_Id}
  	</update>
  	
  	<insert id="insertMemberShop" parameterType="MemberShopDTO">
  		insert into shop values(shop_seq.nextval,#{shop_name},#{shop_phone},#{operating_time},#{address},#{origin},#{takeout},#{shop_img},#{license_number},sysdate,sysdate,#{status},#{approve_status},#{member_num})
  	</insert>
  	
  	<!--id 중복 체크  -->
  	<select id="idChk" resultType="int">
  		select count(*) from member where member_id=#{member_id}
  	</select>
  	
  	
  	 <select id="getMemberData" parameterType="String" resultType="memberDTO">
  		select * from member where member_id =#{value}
  	</select>
  	<update id="upgradeEnroll" parameterType="String">
  		update member set business_license = 2 where member_Id = #{value}
  	</update>
  	
  </mapper>